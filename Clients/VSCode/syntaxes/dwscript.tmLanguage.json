{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "DWScript",
	"scopeName": "source.dwscript",
	"uuid": "0F537175-89D7-42E7-AA90-57CF949C599D",
	"fileTypes": [
		"dws"
	],
	"patterns": [{
					"include": "#directive"
				},
				{
					"include": "#comments"
				},				
				{
					"include": "#program"
				},
				{
					"include": "#library"
				},
				{
					"include": "#unit"
				},
				{
					"include": "#statement"
				}
	],
	"repository": {

		"unit": {
			"patterns": [{
				"name": "meta.unit.dwscript",
				"begin": "\\b((?i:UNIT))\\s*([&[:alpha:]][_\\.[:alnum:]]*)(;)",
				"beginCaptures": {
					"1": {
						"name": "keyword.filetype.dwscript"
					},
					"2": {
						"name": "entity.name.unit.dwscript"
					},
					"3": {
						"name": "punctuation.terminator.unit.dwscript"
					}
				},
				"end": "(?<=end)\\.",
				"endCaptures": {
					"0": {
						"name": "punctuation.terminator.unit.dwscript"
					}
				},
				"patterns": [{
					"include": "#statement"
				}]
			}]
		},

		"program": {
			"patterns": [{
				"name": "meta.program.dwscript",
				"begin": "\\b(?i:PROGRAM)\\b",
				"beginCaptures": {
					"0": {
						"name": "keyword.filetype.dwscript"
					}
				},
				"end": ";",
				"endCaptures": {
					"0": {
						"name": "punctuation.terminator.statement.dwscript"
					}
				},
				"patterns": [{
					"include": "#statement"
				}]
			}]
		},

		"library": {
			"patterns": [{
				"name": "meta.library.dwscript",
				"begin": "\\b(?i:LIBRARY)\\b",
				"beginCaptures": {
					"0": {
						"name": "keyword.filetype.dwscript"
					}
				},
				"end": ";",
				"endCaptures": {
					"0": {
						"name": "punctuation.terminator.statement.dwscript"
					}
				},
				"patterns": [{
					"include": "#statement"
				}]
			}]
		},

		"uses": {
			"patterns": [{
				"name": "meta.uses.dwscript",
				"begin": "\\b(?i:USES)",
				"beginCaptures": {
					"0": {
						"name": "keyword.grouping.dwscript"
					}
				},
				"end": ";",
				"endCaptures": {
					"0": {
						"name": "punctuation.terminator.uses.dwscript"
					}
				},
				"patterns": [{
					"include": "#directive"
				},
        {
					"include": "#comments"
				},
        {
					"include": "#unitname"
				},
        {
					"include": "#punctuation-comma"
				}]
			}]
		},

		"unitname": {
			"patterns": [{
				"name": "entity.name.unit.dwscript",
				"match": "([&[:alpha:]][_\\.[:alnum:]]*)"
			}]
		},

		"statement": {
			"patterns": [{
					"include": "#boolean"
				},
				{
					"include": "#directive"
				},
				{
					"include": "#comments"
				},
				{
					"include": "#functions"
				},
				{
					"include": "#keywords"
				},
				{
					"include": "#numeric"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#types"
				},
				{
					"include": "#uses"
				}
			]
		},

		"boolean": {
			"patterns": [{
				"name": "constant.boolean.dwscript",
				"match": "\\b(?i:(TRUE|FALSE))\\b"
			}]
		},
		"directive": {
			"patterns": [{
					"name": "comment.line.directive.dwscript",
					"begin": "\\{\\$",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.dwscript"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.dwscript"
						}
					}
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.line.character.dwscript",
					"match": "(\/{2})(.*)$"
				},
				{
					"name": "comment.block.dwscript",
					"begin": "\\(\\*",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.dwscript"
						}
					},
					"end": "\\*\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.dwscript"
						}
					}
				},
				{
					"name": "comment.block.dwscript",
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.dwscript"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.dwscript"
						}
					}
				}
			]
		},
		"functions": {
			"patterns": [
				{
					"name": "entity.name.function",
					"begin": "\\b(?i:(CONSTRUCTOR|DESTRUCTOR|FUNCTION|METHOD|PROCEDURE))\\b",
					"beginCaptures": {
						"0": {
							"name": "storage.type.function.dwscript"
						}
					},
					"end": ";",
					"endCaptures": {
						"0": {
							"name": "punctuation.terminator.statement.dwscript"
						}
					}
				}
			]
		},
		"keywords": {
			"patterns": [{
					"name": "keyword.control.flow.dwscript",
					"match": "\\b(?i:(CASE|DO|DOWNTO|ELSE|EXCEPT|FINALLY|FOR|IF|REPEAT|SWITCH|THEN|TO|TRY|UNTIL|WHILE))\\b"
				},
				{
					"name": "keyword.control.flow.dwscript",
					"match": "\\b(?i:(BREAK|CONTINUE|EXIT))\\b"
				},
				{
					"name": "keyword.dwscript",
					"match": "\\b(?i:(CLASS|INTERFACE|OBJECT|HELPER))\\b"
				},
				{
					"name": "keyword.grouping.dwscript",
					"match": "\\b(?i:(EMPTY|FINALIZATION|INITIALIZATION|INTERFACE|IMPLEMENTATION|RESOURCESTRING))\\b"
				},
				{
					"name": "keyword.structure.dwscript",
					"match": "\\b(?<!\\.)(?i:(ABSTRACT|DEFAULT|FINAL|INDEX|OVERLOAD|OVERRIDE|PARTIAL|PRIVATE|PROPERTY|PROTECTED|PUBLIC|PUBLISHED|READ|REINTRODUCE|SEALED|VIRTUAL|WRITE))\\b(?![\\<\\\/(])"
				},
				{
					"name": "keyword.dwscript",
					"match": "\\b(?<!\\.)(?i:(ARRAY|ASM|CONST|DEPRECATED|ENSURE|ENUM|EXPORT|EXTERNAL|FLAGS|FORWARD|IMPLEMENTS|IMPLICIT|IMPLIES|INHERITED|INLINE|INVARIANTS|LAMBDA|LAZY|NAMESPACE|NEW|NIL|OF|OLD|ON|OPERATOR|RAISE|RECORD|REQUIRE|SET|STATIC|STRICT|TYPE|VAR))\\b(?![\\<\\\/(])"
				},
				{
					"name": "keyword.dwscript",
					"match": "\\b(?i:(BEGIN|END))\\b"
				},
				{
					"name": "keyword.operator.dwscript",
					"match": "\\b(?i:(AS|DIV|MOD|SAR|SHL|SHR))\\b"
				},
				{
					"name": "keyword.operator.logical.dwscript",
					"comment": "keyword operators that evaluate to True or False",
					"match": "\\b(?i:(AND|IN|IS|NOT|OR|XOR))\\b"
				},
				{
					"name": "keyword.operator.assignment.dwscript",
					"match": "\\:\\=|\\^\\=|\\\/\\=|\\-\\=|\\%\\=|\\+\\=|\\~\\=|\\*\\="
				},
				{
					"name": "keyword.operator.dwscript",
					"match": "\\&|\\&\\&|\\@|\\@\\=|\\^|\\:|\\\/|\\=|\\=\\>|\\!|\\>|\\>\\=|\\>\\>|\\<|\\<\\=|\\<\\<|\\-|\\<\\>|\\%|\\||\\|\\||\\+|\\?|\\?\\.|\\?\\?|\\~|\\*"
				}
			]
		},
		"numeric": {
			"patterns": [{
				"name": "constant.numeric.dwscript",
				"match": "((\\$([A-Fa-f0-9]*))|(\\b(([0-9]+\\.?[0-9]*))|(\\b(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?))\\b"
			}]								 
		},
		"punctuation-comma": {
			"name": "punctuation.separator.comma.dwscript",
			"match": ","
		},
		"punctuation-semicolon": {
			"name": "punctuation.terminator.statement.dwscript",
			"match": ";"
		},
		"strings": {
			"patterns": [{
				"name": "string.quoted.double.dwscript",
				"begin": "\"",
				"end": "\"",
				"captures": {
					"0": {
						"name": "string.quoted.double.dwscript"
					}
				},
				"patterns": [
					{
						"name": "constant.character.escape.quote.dwscript",
						"match": "\"\""
					}
				]
			},
			{
				"name": "string.quoted.single.dwscript",
				"begin": "'",
				"end": "(?i:('|\\n))",
				"captures": {
					"0": {
						"name": "string.quoted.single.dwscript"
					}
				},
				"patterns": [
					{
						"name": "constant.character.escape.apostrophe.dwscript",
						"match": "''"
					}
				]
			}]
		},
		"types": {
			"patterns": [{
				"name": "storage.type.dwscript",
				"match": "\\b(?i:(string|boolean|float|integer))\\b"
			}]
		}
	}
}